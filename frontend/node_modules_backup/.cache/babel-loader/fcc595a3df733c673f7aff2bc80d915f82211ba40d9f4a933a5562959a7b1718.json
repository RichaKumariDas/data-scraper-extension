{"ast":null,"code":"// src/api.js\n// Handles external API requests (keeps logic modular & separate)\n/**\r\n * Fetches random advice from the Advice Slip API.\r\n * @returns {Promise<string>} - A piece of advice or a fallback message.\r\n */export const fetchAdvice=async()=>{try{const response=await fetch(\"https://api.adviceslip.com/advice\");const data=await response.json();return data.slip.advice;// return advice text\n}catch(error){console.error(\"Error fetching advice:\",error);return\"Could not fetch advice.\";// fallback on error\n}};","map":{"version":3,"names":["fetchAdvice","response","fetch","data","json","slip","advice","error","console"],"sources":["C:/Users/coold/OneDrive/Documents/VSCODE/data-scraper-extension/frontend/src/api.js"],"sourcesContent":["// src/api.js\r\n// Handles external API requests (keeps logic modular & separate)\r\n\r\n/**\r\n * Fetches random advice from the Advice Slip API.\r\n * @returns {Promise<string>} - A piece of advice or a fallback message.\r\n */\r\nexport const fetchAdvice = async () => {\r\n  try {\r\n    const response = await fetch(\"https://api.adviceslip.com/advice\");\r\n    const data = await response.json();\r\n    return data.slip.advice; // return advice text\r\n  } catch (error) {\r\n    console.error(\"Error fetching advice:\", error);\r\n    return \"Could not fetch advice.\"; // fallback on error\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,WAAW,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,mCAAmC,CAAC,CACjE,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CAACE,IAAI,CAACC,MAAM,CAAE;AAC3B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,yBAAyB,CAAE;AACpC,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}